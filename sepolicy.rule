# magisk_hidgadget_service SELinux Policy

# This file defines the custom SELinux policy for the hid-setup service.
# It should be placed at the root of the Magisk module directory as 'sepolicy.rule'.
# Magisk loads policy files from module roots and compiles/loads them into the kernel.

# 1. Declare the custom domain/type for the hid-setup service process.
# This is the SELinux context type assigned to the service process via the 'seclabel' directive in init.hidgadget.rc.
# 'domain' is the attribute for process types.
type magisk_hidgadget_service, domain;
# The executable script/binary needs an exec_type, usually vendor_file_type or system_file_type
type magisk_hidgadget_service_exec, file_type, exec_type, vendor_file_type;


# --- 2. Grant Permissions needed for ConfigFS access ---
# These rules grant access to objects (directories, files, links) *within*
# the mounted configfs filesystem itself, typically found at /config or /sys/kernel/config.
# Objects inside configfs have the 'configfs' type (context u:object_r:configfs:s0).

# Allow managing directories (create, traverse, rename, remove) inside configfs
# Permissions include: create, add_name, remove_name, rmdir, search, write
allow magisk_hidgadget_service configfs:dir { create add_name remove_name rmdir search write };

# Allow creating symbolic links inside configfs (for linking functions to configs)
allow magisk_hidgadget_service configfs:lnk_file { create };

# Allow managing files inside configfs (e.g., idVendor, idProduct, report_desc, UDC files within the gadget dir)
# Permissions include: create, write, read, open, getattr, setattr
allow magisk_hidgadget_service configfs:file { create write read open getattr setattr };


# --- 3. Grant Permissions needed for accessing /sys/class/udc ---
# The setup script iterates through /sys/class/udc/* to find an available UDC name.
# Directories/files under /sys are typically labeled with the 'sysfs' type (context u:object_r:sysfs:s0).

# Allow searching the /sys/class/udc directory to list entries (needed for the 'for' loop)
allow magisk_hidgadget_service sysfs:dir search;

# Allow reading and getting attributes of the entries (e.g., symlinks or files within /sys/class/udc)
# Needed by the shell 'for' loop to check existence and access properties if needed.
allow magisk_hidgadget_service sysfs:file { read getattr };


# --- 4. Grant Permissions needed for other system interactions ---

# If the script needs to perform 'mount' operations (e.g., mounting configfs itself).
# Based on analysis, this rule might be necessary if the script attempts to mount
# configfs and encounters a denial, even if it's typically mounted by init.
# Add this rule IF logcat shows 'self:filesystem mount' denials for your service.
allow magisk_hidgadget_service self:filesystem mount; # Added as requested

# If the script needs to create character device nodes /dev/hidgX manually or set their permissions (chmod).
# The script does this via mknod and chmod. The nodes usually get a 'device' class
# and a type like 'device' or 'hidg_device' (check 'ls -Z /dev/hidgX' after manual creation).
# Check logcat for denials on 'device:chr_file' or '<hidg_device_type>:chr_file' when mknod/chmod runs.
# Example rules (uncomment and adjust target type based on denial logs):
allow magisk_hidgadget_service device:chr_file { create_file_perms }; # create_file_perms = { create read write open getattr setattr }
allow magisk_hidgadget_service hidg_device:chr_file { create_file_perms }; # Example if a specific hidg_device type exists
# If only setattr is denied (for chmod 666):
allow magisk_hidgadget_service device:chr_file { setattr };
allow magisk_hidgadget_service hidg_device:chr_file { setattr };


# Note: This policy is a starting point. If you encounter denials, analyze them
# using 'audit2allow' or manually determine the required permissions and add them here.
# Denial logs contain 'AVC', 'denied', and the source/target contexts (source=magisk_hidgadget_service) and permission.
