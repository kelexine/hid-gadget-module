#!/system/bin/sh
# hid-setup - Configure USB HID gadget using standard Android paths
# This script adds HID functions (keyboard, mouse, consumer) to the
# standard Android gadget configuration (/config/usb_gadget/g1/configs/b.1).
# It uses hid.gs1, hid.gs2, hid.gs3 as function names.
# It reads HID report descriptors from files in the module's /system/etc/hid directory.

set -e

# Standard Android gadget paths
GADGET_DIR="/config/usb_gadget/g1"
CONFIG_DIR="${GADGET_DIR}/configs/b.1"

# Function names (using hid.gsX convention)
KEYBOARD_FUNC="hid.gs1"
MOUSE_FUNC="hid.gs2"
CONSUMER_FUNC="hid.gs3"

# Corresponding device nodes
KEYBOARD_DEV="/dev/hidg1"
MOUSE_DEV="/dev/hidg2"
CONSUMER_DEV="/dev/hidg3"

# Corresponding device node major/minor numbers (assuming standard HID gadget major 243)
# Minor numbers usually match the function index (0, 1, 2, ...)
# Since we start functions at gs1, the minor numbers will be 1, 2, 3
KEYBOARD_MINOR=1
MOUSE_MINOR=2
CONSUMER_MINOR=3
HIDG_MAJOR=243 # Standard major number for hidg devices

# --- Pre-checks ---
echo "Checking for standard gadget paths..."
if [ ! -d "$GADGET_DIR" ]; then
    echo "Error: Standard gadget directory '$GADGET_DIR' not found."
    echo "Ensure your kernel is configured for USB Gadget support (CONFIG_USB_GADGET)."
    exit 1
fi
if [ ! -d "$CONFIG_DIR" ]; then
    echo "Error: Standard gadget configuration directory '$CONFIG_DIR' not found."
    echo "Ensure your system's USB gadget configuration is standard."
    exit 1
fi
echo "Standard paths found."

# --- Cleanup existing functions/links (if they exist from a previous run) ---
echo "Cleaning up previous HID function links and directories (if any)..."
# Disable gadget first to allow removal
CURRENT_UDC=$(cat "$GADGET_DIR/UDC" 2>/dev/null)
if [ -n "$CURRENT_UDC" ]; then
    echo "" > "$GADGET_DIR/UDC" || echo "Warning: Could not clear UDC. Cleanup might fail."
    sleep 1 # Give time for UDC to release
fi

# Remove links from the configuration directory
rm -f "${CONFIG_DIR}/${KEYBOARD_FUNC}" 2>/dev/null || true
rm -f "${CONFIG_DIR}/${MOUSE_FUNC}" 2>/dev/null || true
rm -f "${CONFIG_DIR}/${CONSUMER_FUNC}" 2>/dev/null || true
echo "Removed function links from ${CONFIG_DIR}."

# Remove function directories
rmdir "${GADGET_DIR}/functions/${KEYBOARD_FUNC}" 2>/dev/null || true
rmdir "${GADGET_DIR}/functions/${MOUSE_FUNC}" 2>/dev/null || true
rmdir "${GADGET_DIR}/functions/${CONSUMER_FUNC}" 2>/dev/null || true
echo "Removed function directories from ${GADGET_DIR}/functions."


# --- Create HID functions ---

# Create keyboard function
echo "Creating keyboard function ${KEYBOARD_FUNC}..."
mkdir -p "${GADGET_DIR}/functions/${KEYBOARD_FUNC}" || { echo "Error: Failed to create ${GADGET_DIR}/functions/${KEYBOARD_FUNC}. Check SELinux."; exit 1; }
echo 1 > "${GADGET_DIR}/functions/${KEYBOARD_FUNC}/protocol"  # Keyboard (Boot Protocol)
echo 1 > "${GADGET_DIR}/functions/${KEYBOARD_FUNC}/subclass"  # Boot Interface Subclass
echo 8 > "${GADGET_DIR}/functions/${KEYBOARD_FUNC}/report_length"
# Read report descriptor from file
cat "${MODPATH}/system/etc/hid/keyboard-desc.bin" > "${GADGET_DIR}/functions/${KEYBOARD_FUNC}/report_desc" || { echo "Error: Failed to write keyboard report_desc. Check file existence and SELinux."; exit 1; }

# Create mouse function
echo "Creating mouse function ${MOUSE_FUNC}..."
mkdir -p "${GADGET_DIR}/functions/${MOUSE_FUNC}" || { echo "Error: Failed to create ${GADGET_DIR}/functions/${MOUSE_FUNC}. Check SELinux."; exit 1; }
echo 2 > "${GADGET_DIR}/functions/${MOUSE_FUNC}/protocol"  # Mouse (Boot Protocol)
echo 1 > "${GADGET_DIR}/functions/${MOUSE_FUNC}/subclass"  # Boot Interface Subclass
echo 4 > "${GADGET_DIR}/functions/${MOUSE_FUNC}/report_length"
# Read report descriptor from file
cat "${MODPATH}/system/etc/hid/mouse-desc.bin" > "${GADGET_DIR}/functions/${MOUSE_FUNC}/report_desc" || { echo "Error: Failed to write mouse report_desc. Check file existence and SELinux."; exit 1; }

# Create consumer control function
echo "Creating consumer control function ${CONSUMER_FUNC}..."
mkdir -p "${GADGET_DIR}/functions/${CONSUMER_FUNC}" || { echo "Error: Failed to create ${GADGET_DIR}/functions/${CONSUMER_FUNC}. Check SELinux."; exit 1; }
echo 0 > "${GADGET_DIR}/functions/${CONSUMER_FUNC}/protocol"  # None (Report Protocol)
echo 0 > "${GADGET_DIR}/functions/${CONSUMER_FUNC}/subclass"  # None
echo 2 > "${GADGET_DIR}/functions/${CONSUMER_FUNC}/report_length"
# Read report descriptor from file
cat "${MODPATH}/system/etc/hid/consumer-desc.bin" > "${GADGET_DIR}/functions/${CONSUMER_FUNC}/report_desc" || { echo "Error: Failed to write consumer report_desc. Check file existence and SELinux."; exit 1; }


# --- Link functions to the standard configuration ---
echo "Linking functions to configuration ${CONFIG_DIR}..."
ln -s "${GADGET_DIR}/functions/${KEYBOARD_FUNC}" "${CONFIG_DIR}/${KEYBOARD_FUNC}" || { echo "Error: Failed to link ${KEYBOARD_FUNC}. Check SELinux."; exit 1; }
ln -s "${GADGET_DIR}/functions/${MOUSE_FUNC}" "${CONFIG_DIR}/${MOUSE_FUNC}" || { echo "Error: Failed to link ${MOUSE_FUNC}. Check SELinux."; exit 1; }
ln -s "${GADGET_DIR}/functions/${CONSUMER_FUNC}" "${CONFIG_DIR}/${CONSUMER_FUNC}" || { echo "Error: Failed to link ${CONSUMER_FUNC}. Check SELinux."; exit 1; }
echo "Functions linked."


# --- Re-enable the gadget using the previously active UDC or find one ---
echo "Finding and enabling UDC..."
UDC_TO_ENABLE=""
if [ -n "$CURRENT_UDC" ]; then
    # Try the previously active UDC first
    if [ -e "/sys/class/udc/${CURRENT_UDC}" ]; then
        echo "Attempting to re-enable on previous UDC: ${CURRENT_UDC}"
        UDC_TO_ENABLE="$CURRENT_UDC"
    else
        echo "Previous UDC '${CURRENT_UDC}' not found. Searching for available UDC..."
    fi
fi

# If no previous UDC or it wasn't found, search for one
if [ -z "$UDC_TO_ENABLE" ]; then
    for UDC in /sys/class/udc/*; do
        if [ -e "$UDC" ]; then
            UDC_NAME=$(basename "$UDC")
            echo "Found available UDC: $UDC_NAME"
            UDC_TO_ENABLE="$UDC_NAME"
            break # Use the first one found
        fi
    done
fi

if [ -z "$UDC_TO_ENABLE" ]; then
    echo "Error: No available UDC found in /sys/class/udc/."
    echo "Check kernel configuration (CONFIG_USB_GADGET), USB cable connection, and SELinux policy for /sys/class/udc access."
    exit 1 # Exit if no UDC could be found
fi

# Enable the gadget
echo "Enabling gadget on UDC: $UDC_TO_ENABLE"
echo "$UDC_TO_ENABLE" > "$GADGET_DIR/UDC" || { echo "Error: Failed to write UDC name '$UDC_TO_ENABLE' to $GADGET_DIR/UDC. Check SELinux."; exit 1; }

# Verify if the UDC was actually set
if [ "$(cat "$GADGET_DIR/UDC")" != "$UDC_TO_ENABLE" ]; then
    echo "Error: Failed to confirm gadget enablement on UDC '$UDC_TO_ENABLE'."
    exit 1
fi
echo "Gadget enabled."


# --- Create device nodes ---
# These should ideally be created by udev/devd based on kernel events,
# but manual creation is sometimes necessary on Android.
echo "Creating device nodes ${KEYBOARD_DEV}, ${MOUSE_DEV}, ${CONSUMER_DEV}..."
mkdir -p /dev || { echo "Warning: Could not create /dev directory? Permissions issue?"; } # Should usually exist
mknod ${KEYBOARD_DEV} c ${HIDG_MAJOR} ${KEYBOARD_MINOR} 2>/dev/null || { echo "Warning: Could not create ${KEYBOARD_DEV}. May already exist or permissions issue. Check SELinux."; }
mknod ${MOUSE_DEV} c ${HIDG_MAJOR} ${MOUSE_MINOR} 2>/dev/null || { echo "Warning: Could not create ${MOUSE_DEV}. May already exist or permissions issue. Check SELinux."; }
mknod ${CONSUMER_DEV} c ${HIDG_MAJOR} ${CONSUMER_MINOR} 2>/dev/null || { echo "Warning: Could not create ${CONSUMER_DEV}. May already exist or permissions issue. Check SELinux."; }
# Set permissions for the device nodes
chmod 666 ${KEYBOARD_DEV} ${MOUSE_DEV} ${CONSUMER_DEV} 2>/dev/null || { echo "Warning: Could not chmod /dev/hidgX. Check SELinux policy for device nodes."; }
echo "Device nodes created and permissions set (attempted)."


echo "HID gadget setup complete using standard paths and hid.gsX functions."
exit 0
