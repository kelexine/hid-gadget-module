#!/system/bin/sh
# hid-setup - Configure USB HID gadget
# This script sets up the USB HID gadget with keyboard, mouse, and consumer control devices
# It now reads HID report descriptors from files in the module's /system/etc/hid directory.

set -e

# Function to generate a random serial number
generate_serial() {
    # Generate a random 10-character alphanumeric string
    tr -dc 'A-Z0-9' < /dev/urandom | head -c 10
}

# Find the configfs mount point
# Prefer /config as it's standard on recent Android
CONFIGFS_HOME="/config"

# Check if /config is a configfs mount point
if ! mount | grep -q "configfs on $CONFIGFS_HOME"; then
    # If not mounted at /config, check /sys/kernel/config
    CONFIGFS_HOME="/sys/kernel/config"
    # Check if /sys/kernel/config is a configfs mount point
    if ! mount | grep -q "configfs on $CONFIGFS_HOME"; then
         # If neither is mounted, something is wrong with the system
         echo "Error: configfs is not mounted at /config or /sys/kernel/config."
         # Check logcat for kernel/init errors related to configfs
         exit 1
    fi
fi

GADGET_DIR="$CONFIGFS_HOME/usb_gadget/hid"

# Remove any existing gadget with the same name
if [ -d "$GADGET_DIR" ]; then
    echo "Cleaning up existing gadget configuration in $GADGET_DIR"
    # Find the UDC and disable it
    if [ -f "$GADGET_DIR/UDC" ]; then
        echo "" > "$GADGET_DIR/UDC" || true # Use || true to prevent set -e from failing if UDC write fails
        echo "Disabled UDC."
    fi

    # Remove linked functions from the configuration
    echo "Removing linked functions..."
    rm -f "$GADGET_DIR/configs/c.1/hid.usb0" 2>/dev/null || true
    rm -f "$GADGET_DIR/configs/c.1/hid.usb1" 2>/dev/null || true
    rm -f "$GADGET_DIR/configs/c.1/hid.usb2" 2>/dev/null || true
    echo "Linked functions removed."

    # Remove functions directories
    echo "Removing function directories..."
    rmdir "$GADGET_DIR/functions/hid.usb0" 2>/dev/null || true
    rmdir "$GADGET_DIR/functions/hid.usb1" 2>/dev/null || true
    rmdir "$GADGET_DIR/functions/hid.usb2" 2>/dev/null || true
    echo "Function directories removed."

    # Remove configuration strings directory
    rmdir "$GADGET_DIR/configs/c.1/strings/0x409" 2>/dev/null || true
    echo "Config strings directory removed."

    # Remove configuration directory
    rmdir "$GADGET_DIR/configs/c.1" 2>/dev/null || true
    echo "Config directory removed."

    # Remove gadget strings directory
    rmdir "$GADGET_DIR/strings/0x409" 2>/dev/null || true
     echo "Gadget strings directory removed."

    # Remove gadget directory
    rmdir "$GADGET_DIR" 2>/dev/null || true
    echo "Gadget directory removed."
fi

# Create gadget directory
echo "Creating gadget directory: $GADGET_DIR"
mkdir -p "$GADGET_DIR" || { echo "Error: Failed to create $GADGET_DIR. Check configfs mount and SELinux."; exit 1; }


# Set USB device properties
echo "Setting device properties..."
echo 0x046d > "$GADGET_DIR/idVendor"
echo 0xc52b > "$GADGET_DIR/idProduct"

# Set device strings
echo "Setting device strings..."
mkdir -p "$GADGET_DIR/strings/0x409" || { echo "Error: Failed to create $GADGET_DIR/strings/0x409. Check SELinux."; exit 1; }
echo "L$(generate_serial)" > "$GADGET_DIR/strings/0x409/serialnumber"
echo "Logitech" > "$GADGET_DIR/strings/0x409/manufacturer"
echo "Wireless Combo MK520" > "$GADGET_DIR/strings/0x409/product"

# Create configuration
echo "Creating configuration c.1..."
mkdir -p "$GADGET_DIR/configs/c.1" || { echo "Error: Failed to create $GADGET_DIR/configs/c.1. Check SELinux."; exit 1; }
mkdir -p "$GADGET_DIR/configs/c.1/strings/0x409" || { echo "Error: Failed to create $GADGET_DIR/configs/c.1/strings/0x409. Check SELinux."; exit 1; }
echo "HID Devices" > "$GADGET_DIR/configs/c.1/strings/0x409/configuration"
echo 500 > "$GADGET_DIR/configs/c.1/MaxPower"

# Create keyboard function
echo "Creating keyboard function hid.usb0..."
mkdir -p "$GADGET_DIR/functions/hid.usb0" || { echo "Error: Failed to create $GADGET_DIR/functions/hid.usb0. Check SELinux."; exit 1; }
echo 1 > "$GADGET_DIR/functions/hid.usb0/protocol"  # Keyboard (Boot Protocol)
echo 1 > "$GADGET_DIR/functions/hid.usb0/subclass"  # Boot Interface Subclass
echo 8 > "$GADGET_DIR/functions/hid.usb0/report_length"
# --- MODIFIED: Read report descriptor from file ---
cat "${MODPATH}/system/etc/hid/keyboard-desc.bin" > "$GADGET_DIR/functions/hid.usb0/report_desc" || { echo "Error: Failed to write keyboard report_desc. Check file existence and SELinux."; exit 1; }


# Create mouse function
echo "Creating mouse function hid.usb1..."
mkdir -p "$GADGET_DIR/functions/hid.usb1" || { echo "Error: Failed to create $GADGET_DIR/functions/hid.usb1. Check SELinux."; exit 1; }
echo 2 > "$GADGET_DIR/functions/hid.usb1/protocol"  # Mouse (Boot Protocol)
echo 1 > "$GADGET_DIR/functions/hid.usb1/subclass"  # Boot Interface Subclass
echo 4 > "$GADGET_DIR/functions/hid.usb1/report_length"
# --- MODIFIED: Read report descriptor from file ---
cat "${MODPATH}/system/etc/hid/mouse-desc.bin" > "$GADGET_DIR/functions/hid.usb1/report_desc" || { echo "Error: Failed to write mouse report_desc. Check file existence and SELinux."; exit 1; }


# Create consumer control function
echo "Creating consumer control function hid.usb2..."
mkdir -p "$GADGET_DIR/functions/hid.usb2" || { echo "Error: Failed to create $GADGET_DIR/functions/hid.usb2. Check SELinux."; exit 1; }
echo 0 > "$GADGET_DIR/functions/hid.usb2/protocol"  # None (Report Protocol)
echo 0 > "$GADGET_DIR/functions/hid.usb2/subclass"  # None
echo 2 > "$GADGET_DIR/functions/hid.usb2/report_length"
# --- MODIFIED: Read report descriptor from file ---
cat "${MODPATH}/system/etc/hid/consumer-desc.bin" > "$GADGET_DIR/functions/hid.usb2/report_desc" || { echo "Error: Failed to write consumer report_desc. Check file existence and SELinux."; exit 1; }


# Link functions to configuration
echo "Linking functions to configuration c.1..."
ln -s "$GADGET_DIR/functions/hid.usb0" "$GADGET_DIR/configs/c.1/hid.usb0" || { echo "Error: Failed to link hid.usb0. Check SELinux."; exit 1; }
ln -s "$GADGET_DIR/functions/hid.usb1" "$GADGET_DIR/configs/c.1/hid.usb1" || { echo "Error: Failed to link hid.usb1. Check SELinux."; exit 1; }
ln -s "$GADGET_DIR/functions/hid.usb2" "$GADGET_DIR/configs/c.1/hid.usb2" || { echo "Error: Failed to link hid.usb2. Check SELinux."; exit 1; }
echo "Functions linked."


# Find the first available UDC
echo "Finding and enabling UDC..."
UDC_FOUND=false
for UDC in /sys/class/udc/*; do
    if [ -e "$UDC" ]; then
        UDC_NAME=$(basename "$UDC")
        echo "$UDC_NAME" > "$GADGET_DIR/UDC" || { echo "Warning: Failed to write UDC name '$UDC_NAME' to $GADGET_DIR/UDC. Trying next UDC or continuing."; }
        # Verify if the UDC was actually set
        if [ "$(cat "$GADGET_DIR/UDC")" = "$UDC_NAME" ]; then
            echo "Enabled gadget on UDC: $UDC_NAME"
            UDC_FOUND=true
            break # Stop after the first successful UDC
        fi
    fi
done

if [ "$UDC_FOUND" = false ]; then
    echo "Error: No available UDC found or could not enable gadget on any UDC."
    echo "Check kernel configuration (CONFIG_USB_GADGET), USB cable connection, and SELinux policy for /sys/class/udc access."
    exit 1 # Exit if no UDC could be enabled
fi

# Create device nodes
# These should ideally be created by udev/devd based on kernel events,
# but manual creation is sometimes necessary on Android.
echo "Creating device nodes /dev/hidgX..."
mkdir -p /dev || { echo "Warning: Could not create /dev directory? Permissions issue?"; } # Should usually exist
mknod /dev/hidg0 c 243 0 2>/dev/null || { echo "Warning: Could not create /dev/hidg0. May already exist or permissions issue. Check SELinux."; }
mknod /dev/hidg1 c 243 1 2>/dev/null || { echo "Warning: Could not create /dev/hidg1. May already exist or permissions issue. Check SELinux."; }
mknod /dev/hidg2 c 243 2 2>/dev/null || { echo "Warning: Could not create /dev/hidg2. May already exist or permissions issue. Check SELinux."; }
# Set permissions for the device nodes
chmod 666 /dev/hidg0 /dev/hidg1 /dev/hidg2 2>/dev/null || { echo "Warning: Could not chmod /dev/hidgX. Check SELinux policy for device nodes."; }
echo "Device nodes created and permissions set (attempted)."


echo "HID gadget setup complete"
exit 0
